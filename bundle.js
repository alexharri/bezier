!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=37)}([function(t,e,n){"use strict";t.exports={colors:{PRIMARY:"#29aaf4",PRIMARY_LIGHT:"#68bef2",PRIMARY_LIGHTER:"#c4e9ff",WHITE:"#fff"},types:{POINT:"__POINT",CONN:"__CONNECTION",HANDLE:"__HANDLE",LINE:"__LINE"},typeReducers:{__POINT:"points",__CONNECTION:"connections",__HANDLE:"handles"},tools:{p:"PEN",PEN:"PEN",v:"MOVE",MOVE:"MOVE"},cursors:{DEFAULT:"default-cursor.png",MOVE:"default-move-cursor.png",PEN:"pen-cursor.png",PEN_ADD_POINT:"pen-add-point-cursor.png",PEN_SELECT_POINT:"pen-select-point-cursor.png",CONVERT_ANCHOR_POINT:"convert-anchor-point-cursor.png"},defaultToolCursors:{MOVE:"DEFAULT",PEN:"PEN"},keys:{SHIFT:"Shift",CONTROL:"Control",ALT:"Alt",ARROW_UP:"ArrowUp",ARROW_LEFT:"ArrowLeft",ARROW_DOWN:"ArrowDown",ARROW_RIGHT:"ArrowRight"}}},function(t,e,n){"use strict";var r=n(28),o=r.createStore,i=r.applyMiddleware,a=n(62),u=a.createLogger,c=n(63),s=void 0;s=i(u({collapsed:!0})),t.exports=o(c,s)},function(t,e,n){"use strict";function r(){for(var t=o.getState(),e=t.points,n=[],r=Object.keys(e),i=0;i<r.length;i+=1){var a=e[r[i]],u=a.x,c=a.y;n.push({x:u,y:c,id:r[i]})}return n}var o=n(1),i=n(10),a=i.getAllConnections,u=n(22);e.getPointById=function(t){if(!t||"string"!=typeof t)throw new Error("Invalid id. Expected string but got '"+t+"'");return o.getState().points[t]||null},e.getPointAtPosition=function(t){for(var e=r(),n=void 0,o=void 0,i=0;i<e.length;i+=1){var a=u(t,e[i]);(!n||a<o)&&(n=e[i],o=a)}return o<225?n:null},e.getPointHandleIds=function(t){for(var e=a(),n=[],r=0;r<e.length;r+=1){var o=e[r].points.indexOf(t);o>-1&&n.push(e[r].handles[o])}return n},e.getPointConnections=function(t){if(!t||"string"!=typeof t)throw new Error("Invalid id. Expected string but got '"+t+"'");for(var e=[],n=o.getState().connections,r=Object.keys(n),i=0;i<r.length;i+=1)-1!==n[r[i]].points.indexOf(t)&&e.push(n[r[i]]);return e},e.getAllPoints=r},function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function o(t){if(!(s.indexOf(t)>-1)){if(!t||"string"!=typeof t)throw new Error("Invalid type. Expected string but got '"+t+"'.");c.dispatch({type:"ADD_SELECTION_TYPE",payload:t}),s.push(t)}}function i(t){return o(t),c.getState().selection[t]}var a=n(0),u=a.typeReducers,c=n(1),s=[];e.getSelectedOfType=i,e.addToSelection=function(t,e){i(t).indexOf(e)<0&&c.dispatch({type:"ADD_TO_SELECTION",payload:{type:t,id:e}})},e.removeFromSelection=function(t,e){var n=i(t).indexOf(e);n>-1&&c.dispatch({type:"REMOVE_FROM_SELECTION",payload:{type:t,itemIndex:n}})},e.isSelected=function(t,e){return i(t).indexOf(e)>-1},e.clearSelection=function(){c.dispatch({type:"CLEAR_SELECTION"})},e.copySelection=function(){for(var t=c.getState().selection,e={},n=Object.keys(t),o=0;o<n.length;o+=1)e[n[o]]=[].concat(r(t[n[o]]));return e},e.isValidSelection=function(t){for(var e=!0,n=Object.keys(t),r=0;e&&r<n.length;r+=1)!function(r){var o=c.getState()[u[n[r]]];t[n[r]].forEach(function(t){o[t]||(e=!1)})}(r);return e}},function(t,e,n){"use strict";function r(){for(var t=o.getState().handles,e=[],n=Object.keys(t),r=0;r<n.length;r+=1)e.push(t[n[r]]);return e}var o=n(1);e.getAllHandles=r,e.getHandleById=function(t){return o.getState().handles[t]||null}},function(t,e,n){"use strict";for(var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(8),i=n(0),a=i.cursors,u=(document.getElementById("canvas"),{}),c=Object.keys(a),s=0;s<c.length;s+=1){var l=new Image;l.src="static/images/"+a[c[s]],u[c[s]]=l}var f="DEFAULT",d=null;e.setCursor=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e||"object"!==(void 0===e?"undefined":r(e)))throw new Error("Invalid options. Expected object but got '"+e+"'.");if(d&&e.overrideId!==d){if(e.override)throw new Error("Attempted to double override.");return!1}if(void 0===a[t])throw new Error("Invalid cursor '"+t+"'.");if(t!==f){f=t;a[t];return!e.override||(d=o())}},e.getCursor=function(){return u[f]},e.releaseOverride=function(t){if(null===d)throw new Error("No override is present.");if(t!==d)throw new Error("Incorrect overrideId. Expected '"+d+"' but got '"+t+"'.");d=null}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t){return t&&"object"===(void 0===t?"undefined":r(t))&&"number"==typeof t.x&&"number"==typeof t.y}},function(t,e,n){"use strict";function r(t,e){if(!t||"string"!=typeof t)throw new Error("Invalid type. Expected string but got '"+t+"'.");if(!e||"string"!=typeof e)throw new Error("Invalid id. Expected string but got '"+e+"'.");return!(!a[t]||!a[t][e])&&(delete a[t][e],!0)}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(8),a={};e.removeListener=r,e.addListener=function(t,e,n){var o=arguments;if(!t||"string"!=typeof t)throw new Error("Invalid type. Expected string but got '"+t+"'.");if("function"!=typeof e)throw new Error("Expected the 2nd argument to be a function. Got '"+e+"'");a[t]||(a[t]={});var u=i();return a[t][u]=n?function(){e.apply(void 0,o),r(t,u)}:e,u},e.runListeners=function(t){if(!t||"string"!=typeof t)throw new Error("Invalid type. Expected string but got '"+t+"'.");if(a[t]&&"object"===o(a[t])){for(var e=Object.keys(a[t]),n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];for(var u=0;u<e.length;u+=1){var c;(c=a[t])[e[u]].apply(c,r)}}}},function(t,e,n){"use strict";t.exports=n(39)},function(t,e,n){"use strict";function r(){d=!1}function o(t){if(!t)return void(l!==y&&(l=y,r()));if(t!==l){if(t.length!==y.length)throw new Error("Custom alphabet for shortid must be "+y.length+" unique characters. You submitted "+t.length+" characters: "+t);var e=t.split("").filter(function(t,e,n){return e!==n.lastIndexOf(t)});if(e.length)throw new Error("Custom alphabet for shortid must be "+y.length+" unique characters. These characters were not unique: "+e.join(", "));l=t,r()}}function i(t){return o(t),l}function a(t){p.seed(t),f!==t&&(r(),f=t)}function u(){l||o(y);for(var t,e=l.split(""),n=[],r=p.nextValue();e.length>0;)r=p.nextValue(),t=Math.floor(r*e.length),n.push(e.splice(t,1)[0]);return n.join("")}function c(){return d||(d=u())}function s(t){return c()[t]}var l,f,d,p=n(40),y="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";t.exports={characters:i,seed:a,lookup:s,shuffled:c}},function(t,e,n){"use strict";function r(){for(var t=a.getState().connections,e=[],n=Object.keys(t),r=0;r<n.length;r+=1)e.push(t[n[r]]);return e}var o=n(70),i=n(19),a=(i.toConnectionId,n(1));e.getConnectionById=function(t){return a.getState().connections[t]||null},e.getAllConnections=r,e.getConnectionAtPosition=function(t){for(var e=r(),n=0;n<e.length;n+=1){var i=o(e[n],t);if(i)return{closestPoint:i,connection:e[n]}}return null}},function(t,e,n){"use strict";var r=n(12),o=n(73),i=n(76),a=n(6),u=n(5),c=u.getCursor,s=n(13),l=s.resetGuides,f=void 0;t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r();if(n.clearRect(0,0,800,800),o(),i(),l(),!e.noPosition){if(e.useLastPosition?t=f:f=t,!a(t))throw new Error("Invalid position.");n.drawImage(c(),t.x,t.y)}}},function(t,e,n){"use strict";var r=document.getElementById("canvas"),o=r.getContext("2d");t.exports=function(){return o}},function(t,e,n){"use strict";var r=n(74),o=r.checkType,i={};e.addGuide=function(t,e){o(t),Array.isArray(i[t])?i[t].push(e):i[t]=[e]},e.resetGuides=function(){i={}},e.getGuidesOfType=function(t){return o(t),i[t]||[]}},function(t,e,n){"use strict";var r=function(t,e){return{x:e.x-t.x,y:e.y-t.y}};t.exports=r},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(1),i=n(3),a=i.copySelection,u=n(25);t.exports=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(!t||"object"!==(void 0===t?"undefined":r(t)))throw new Error("Invalid action. Expected object but got '"+t+"'.");if(!t.type||"string"!=typeof t.type)throw new Error("Invalid type. Expected string but got '"+t.type+"'.");if(void 0===t.data)throw new Error("Invalid data. Expected any but got '"+t.data+"'.");t.selection=a(),e&&u(t,{ignoreSelection:!0}),o.dispatch({type:"ADD_ACTION_TO_HISTORY",payload:t})}},function(t,e,n){"use strict";function r(t,e,n){return[{x:n.x+.4*(e.x-n.x),y:n.y+.4*(e.y-n.y)},{x:t.x+.85*(e.x-t.x),y:t.y+.85*(e.y-t.y)}]}var o=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.exports=function(t,e,n,i){if(null===e){if(null===n)throw new Error("Expected p2 not to be null.");var a=r(i,n,t),u=o(a,2),c=u[0];return[t,u[1],c,i]}if(null===n){if(null===e)throw new Error("Expected p1 not to be null.");var s=r(t,e,i),l=o(s,2),f=l[0];return[t,l[1],f,i]}throw new Error("Expected either p1 or p2 to be null.")}},function(t,e,n){"use strict";var r=n(0),o=r.tools,i=r.defaultToolCursors,a=n(26),u=n(7),c=u.runListeners,s=n(46),l=n(5),f=l.setCursor,d=n(11),p=n(35),y=n(93),h=n(98),v=(o.PEN,o.MOVE),g={MOVE:p,PEN:y},E={MOVE:void 0,PEN:h},b={},O=v;e.setTool=function(t){o[t]&&o[t]!==O&&(O=o[t],f(O),d(null,{useLastPosition:!0}));for(var e=document.querySelectorAll("[data-tool-key]"),n=0;n<e.length;n+=1)e[n].classList.remove("active"),e[n].getAttribute("data-tool-key")===t&&e[n].classList.add("active")},e.onToolMouseDown=function(t){var e=a(t),n=s(e);n||f(i[O]),g[O]&&g[O](e,n),d(e)},e.onToolMouseMove=function(t){var e=a(t);c("mousemove",e);var n=s(e);n||f(i[O]),E[O]&&E[O](e,n),d(e)},e.onToolMouseUp=function(t){var e=a(t);c("mouseup",e);var n=s(e);n||f(i[O]),b[O]&&b[O](e,n),d(e)}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";var r=function(t,e){return[t,e].sort().join("-")};e.toConnectionId=r},function(t,e,n){"use strict";var r=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=n(2),i=n(4),a=i.getHandleById;t.exports=function(t){var e=o.getPointById,n=r(t.points,2),i=n[0],u=n[1],c=r(t.handles,2),s=c[0],l=c[1];if(!s&&!l&&!u)throw new Error("Invalid connection.");return[e(i),s?a(s):null,l?a(l):null,u?e(u):null]}},function(t,e,n){"use strict";var r=function(t,e,n){return t*(1-n)+e*n};t.exports=r},function(t,e,n){"use strict";t.exports=function(t,e){var n=Math.abs(t.x-e.x),r=Math.abs(t.y-e.y);return n*n+r*r}},function(t,e,n){"use strict";var r=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(12),a=n(6);e.renderCircle=function(t,e,n,r){var a=i();Array.isArray(t)||(t=[t]),a.fillStyle=n;for(var u=0;u<t.length;u+=1){var c=t[u],s=c.x,l=c.y;if(a.beginPath(),a.arc(s,l,e,0,2*Math.PI,!1),a.closePath(),a.fill(),r){if("object"!==(void 0===r?"undefined":o(r)))throw new Error("Invalid stroke. Expected object but got '"+r+"'.");a.beginPath(),a.arc(s,l,e,0,2*Math.PI,!1),a.lineWidth=r.width||1,a.strokeStyle=r.color||"#000000",a.stroke()}}},e.renderLine=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"#444",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,o=i();if(!a(t))throw new Error("Invalid position 'from'.");if(!a(e))throw new Error("Invalid position 'to'.");if("string"!=typeof n)throw new Error("Invalid color. Expected string but got '"+n+"'.");if("number"!=typeof r)throw new Error("Invalid width. Expected number but got '"+r+"'.");o.beginPath(),o.moveTo(t.x,t.y),o.lineTo(e.x,e.y),o.strokeStyle=n,o.lineWidth=r,o.stroke()},e.renderCubicBezier=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"#444";if(!Array.isArray(t))throw new Error("Invalid points. Expected array but got "+t+".");if(4!==t.length)throw new Error("Invalid points. Expected 4 but got "+t.length+".");t.forEach(function(t,e){if(!a(t))throw new Error("Invalid position at index "+e)});var o=r(t,4),u=o[0],c=o[1],s=o[2],l=o[3],f=i();f.beginPath(),f.moveTo(u.x,u.y),f.bezierCurveTo(c.x,c.y,s.x,s.y,l.x,l.y),f.strokeStyle=n,f.lineWidth=e,f.stroke()},e.renderQuadraticBezier=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"#444";if(!Array.isArray(t))throw new Error("Invalid points. Expected array but got "+t+".");if(3!==t.length)throw new Error("Invalid points. Expected 3 but got "+t.length+".");t.forEach(function(t,e){if(!a(t))throw new Error("Invalid position at index "+e)});var o=r(t,3),u=o[0],c=o[1],s=o[2],l=i();l.beginPath(),l.moveTo(u.x,u.y),l.quadraticCurveTo(c.x,c.y,s.x,s.y),l.strokeStyle=n,l.lineWidth=e,l.stroke()}},function(t,e,n){"use strict";function r(t){if("string"!=typeof t)throw new Error("Invalid key. Expected string but got '"+t+"'.");return s[t]||!1}var o=n(17),i=n(0),a=i.keys,u=n(78),c=n(91),s={};e.onKeyUp=function(t){var e=t.key;if("string"!=typeof e)throw new Error("Invalid key. Expected string but got '"+e+"'.");s[e]=!1},e.onKeyDown=function(t){var e=t.key;if(!t.repeat){if("string"!=typeof e)throw new Error("Invalid key. Expected string but got '"+e+"'.");if("z"===e.toLowerCase()&&r(a.CONTROL)&&r(a.SHIFT))return void c();if("z"===e&&r(a.CONTROL))return void u();if("z"===e.toLowerCase()&&r("Meta")&&r(a.SHIFT))return void c();if("z"===e&&r("Meta"))return void u();o.setTool(e),s[e]=!0}},e.isKeyDown=r},function(t,e,n){"use strict";function r(t,e){if(!u[t])throw new Error("Could not find action of type '"+t+"'.");var n=e?"undo":"redo";if("object"===i(u[t])){if("function"!=typeof u[t][n])throw new Error("Invalid action creator of type: '"+t+"'. Could not '"+n+"'.");return u[t][n]}if("function"==typeof u[t])return u[t];throw new Error("Invalid action creator of type: '"+t+"'.")}function o(t,e){for(var n=0;n<t.length;n+=1){var i=t[n],u=i.type,c=i.data,s=r(u,e),l=s(c);Array.isArray(l)?o(l,e):a.dispatch(l)}}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=n(1),u=n(79),c=n(3),s=c.isValidSelection,l=c.clearSelection;t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e||"object"!==(void 0===e?"undefined":i(e)))throw new Error("Invalid options. Expected object but got '"+e+"'.");var n=t.type,u=t.data,c=t.selection,f=e.undo||!1,d=r(n,f),p=d(u);if(Array.isArray(p)?o(p,f):a.dispatch(p),!e.ignoreSelection)if(f){if(!s(c)){var y=a.getState().history.history;if(y.length){var h=y[y.length-1];a.dispatch({type:"RESTORE_SELECTION",payload:h.selection})}else l()}}else a.dispatch({type:"RESTORE_SELECTION",payload:c})}},function(t,e,n){"use strict";var r=n(38),o=r.getLeftOffset,i=r.getTopOffset,a=function(t){return{x:t.clientX-o(),y:t.clientY-i()}};t.exports=a},function(t,e,n){"use strict";function r(t,e){for(var n,r=0,i="";!n;)i+=t(e>>4*r&15|o()),n=e<Math.pow(16,r+1),r++;return i}var o=n(41);t.exports=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(29),o=n(59),i=n(60),a=n(61),u=n(33);n(32);n.d(e,"createStore",function(){return r.b}),n.d(e,"combineReducers",function(){return o.a}),n.d(e,"bindActionCreators",function(){return i.a}),n.d(e,"applyMiddleware",function(){return a.a}),n.d(e,"compose",function(){return u.a})},function(t,e,n){"use strict";function r(t,e,n){function i(){g===v&&(g=v.slice())}function c(){return h}function s(t){if("function"!=typeof t)throw new Error("Expected listener to be a function.");var e=!0;return i(),g.push(t),function(){if(e){e=!1,i();var n=g.indexOf(t);g.splice(n,1)}}}function l(t){if(!Object(o.a)(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(E)throw new Error("Reducers may not dispatch actions.");try{E=!0,h=y(h,t)}finally{E=!1}for(var e=v=g,n=0;n<e.length;n++){(0,e[n])()}return t}function f(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");y=t,l({type:u.INIT})}function d(){var t,e=s;return t={subscribe:function(t){function n(){t.next&&t.next(c())}if("object"!=typeof t)throw new TypeError("Expected the observer to be an object.");return n(),{unsubscribe:e(n)}}},t[a.a]=function(){return this},t}var p;if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(r)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var y=t,h=e,v=[],g=v,E=!1;return l({type:u.INIT}),p={dispatch:l,subscribe:s,getState:c,replaceReducer:f},p[a.a]=d,p}n.d(e,"a",function(){return u}),e.b=r;var o=n(30),i=n(55),a=n.n(i),u={INIT:"@@redux/INIT"}},function(t,e,n){"use strict";function r(t){if(!Object(a.a)(t)||Object(o.a)(t)!=u)return!1;var e=Object(i.a)(t);if(null===e)return!0;var n=f.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&l.call(n)==d}var o=n(47),i=n(52),a=n(54),u="[object Object]",c=Function.prototype,s=Object.prototype,l=c.toString,f=s.hasOwnProperty,d=l.call(Object);e.a=r},function(t,e,n){"use strict";var r=n(48),o=r.a.Symbol;e.a=o},function(t,e,n){"use strict"},function(t,e,n){"use strict";function r(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce(function(t,e){return function(){return t(e.apply(void 0,arguments))}})}e.a=r},function(t,e,n){"use strict";var r=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=n(20),i=n(21);t.exports=function(t,e){function n(t){var n=Math.pow(d,3)*c[t];return n+=3*e*Math.pow(d,2)*s[t],n+=3*d*Math.pow(e,2)*l[t],n+=Math.pow(e,3)*f[t]}var a=o(t),u=r(a,4),c=u[0],s=u[1],l=u[2],f=u[3];if(!s&&!l){return{x:i(c.x,f.x,e),y:i(c.y,f.y,e)}}var d=1-e;return{x:n("x"),y:n("y"),t:e}}},function(t,e,n){"use strict";var r=n(77),o=n(24),i=o.isKeyDown,a=n(0),u=a.keys,c=(a.types,n(7)),s=c.addListener,l=c.removeListener,f=n(5),d=f.setCursor,p=f.releaseOverride,y=n(1),h=n(15),v=n(92),g=n(3),E=g.clearSelection,b=g.addToSelection,O=g.isSelected,w=g.copySelection,x=g.removeFromSelection,N=function(t,e){return{x:e.x-t.x,y:e.y-t.y}};t.exports=function(t,e){if(!e)return void E();var n=e.value,o=e.type,a=r(o,n),c=O(o,a),f=!1,g=void 0,m=t,C=void 0,I=s("mousemove",function(t){f||(f=!0,g=d("MOVE",{override:!0})),y.dispatch({type:"MOVE",payload:{selection:C,positionChange:N(m,t)}}),m=t});s("mouseup",function(){l("mousemove",I),"string"==typeof g&&(p(g),d("DEFAULT")),f&&h({type:"MOVE",data:{selection:C,positionChange:N(t,m)}},!1),!f&&c&&(i(u.SHIFT)?x(o,a):(E(),b(o,a)))},!0),c||(i(u.SHIFT)||E(),b(o,a)),C=v(w())}},function(t,e,n){"use strict";var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o={mirrorLength:!0};t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o,i=e.x,a=e.y;if(n.mirrorLength){return{x:-1*(t.x-i)+i,y:-1*(t.y-a)+a}}var u=r({},n.positionToMirror),c=Math.atan2(pos.y-a,pos.x-i),s=Math.atan2(u.y-a,u.x-i),l=c-s+Math.PI,f=Math.sin(l),d=Math.cos(l);u.x-=i,u.y-=a;var p=u.x*d-u.y*f,y=u.x*f+u.y*d;return u.x=p+i,u.y=y+a,u}},function(t,e,n){"use strict";var r=n(17),o=r.onToolMouseDown,i=r.onToolMouseMove,a=r.onToolMouseUp,u=(n(26),n(11)),c=n(24),s=c.onKeyDown,l=c.onKeyUp,f=n(99);document.getElementById("canvas");window.onkeydown=s,window.onkeyup=l,canvas.onmousedown=o,canvas.onmousemove=i,canvas.onmouseup=a,f(),u(null,{noPosition:!0})},function(t,e,n){"use strict";var r=document.getElementById("canvas"),o=function(){return r.getBoundingClientRect()};e.getLeftOffset=function(){return o().left},e.getTopOffset=function(){return o().top}},function(t,e,n){"use strict";function r(e){return u.seed(e),t.exports}function o(e){return f=e,t.exports}function i(t){return void 0!==t&&u.characters(t),u.shuffled()}function a(){return s(f)}var u=n(9),c=(n(27),n(42)),s=n(43),l=n(44),f=n(45)||0;t.exports=a,t.exports.generate=a,t.exports.seed=r,t.exports.worker=o,t.exports.characters=i,t.exports.decode=c,t.exports.isValid=l},function(t,e,n){"use strict";function r(){return(i=(9301*i+49297)%233280)/233280}function o(t){i=t}var i=1;t.exports={nextValue:r,seed:o}},function(t,e,n){"use strict";function r(){if(!o||!o.getRandomValues)return 48&Math.floor(256*Math.random());var t=new Uint8Array(1);return o.getRandomValues(t),48&t[0]}var o="object"==typeof window&&(window.crypto||window.msCrypto);t.exports=r},function(t,e,n){"use strict";function r(t){var e=o.shuffled();return{version:15&e.indexOf(t.substr(0,1)),worker:15&e.indexOf(t.substr(1,1))}}var o=n(9);t.exports=r},function(t,e,n){"use strict";function r(t){var e="",n=Math.floor(.001*(Date.now()-c));return n===i?o++:(o=0,i=n),e+=a(u.lookup,s),e+=a(u.lookup,t),o>0&&(e+=a(u.lookup,o)),e+=a(u.lookup,n)}var o,i,a=n(27),u=n(9),c=1459707606518,s=6;t.exports=r},function(t,e,n){"use strict";function r(t){if(!t||"string"!=typeof t||t.length<6)return!1;for(var e=o.characters(),n=t.length,r=0;r<n;r++)if(-1===e.indexOf(t[r]))return!1;return!0}var o=n(9);t.exports=r},function(t,e,n){"use strict";t.exports=0},function(t,e,n){"use strict";var r=n(2),o=r.getPointAtPosition,i=n(10),a=i.getConnectionAtPosition,u=n(72);t.exports=function(t){var e=u(t);if(e)return{type:"__HANDLE",value:e};var n=o(t);if(n)return{type:"__POINT",value:n};var r=a(t);return r?{type:"__CONNECTION",value:r}:null}},function(t,e,n){"use strict";function r(t){return null==t?void 0===t?c:u:s&&s in Object(t)?Object(i.a)(t):Object(a.a)(t)}var o=n(31),i=n(50),a=n(51),u="[object Null]",c="[object Undefined]",s=o.a?o.a.toStringTag:void 0;e.a=r},function(t,e,n){"use strict";var r=n(49),o="object"==typeof self&&self&&self.Object===Object&&self,i=r.a||o||Function("return this")();e.a=i},function(t,e,n){"use strict";(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.a=n}).call(e,n(18))},function(t,e,n){"use strict";function r(t){var e=a.call(t,c),n=t[c];try{t[c]=void 0;var r=!0}catch(t){}var o=u.call(t);return r&&(e?t[c]=n:delete t[c]),o}var o=n(31),i=Object.prototype,a=i.hasOwnProperty,u=i.toString,c=o.a?o.a.toStringTag:void 0;e.a=r},function(t,e,n){"use strict";function r(t){return i.call(t)}var o=Object.prototype,i=o.toString;e.a=r},function(t,e,n){"use strict";var r=n(53),o=Object(r.a)(Object.getPrototypeOf,Object);e.a=o},function(t,e,n){"use strict";function r(t,e){return function(n){return t(e(n))}}e.a=r},function(t,e,n){"use strict";function r(t){return null!=t&&"object"==typeof t}e.a=r},function(t,e,n){t.exports=n(56)},function(t,e,n){"use strict";(function(t,r){Object.defineProperty(e,"__esModule",{value:!0});var o,i=n(58),a=function(t){return t&&t.__esModule?t:{default:t}}(i);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var u=(0,a.default)(o);e.default=u}).call(e,n(18),n(57)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},function(t,e,n){"use strict";function r(t,e){var n=e&&e.type;return"Given action "+(n&&'"'+n.toString()+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function o(t){Object.keys(t).forEach(function(e){var n=t[e];if(void 0===n(void 0,{type:a.a.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+a.a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}function i(t){for(var e=Object.keys(t),n={},i=0;i<e.length;i++){var a=e[i];"function"==typeof t[a]&&(n[a]=t[a])}var u=Object.keys(n),c=void 0;try{o(n)}catch(t){c=t}return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1];if(c)throw c;for(var o=!1,i={},a=0;a<u.length;a++){var s=u[a],l=n[s],f=t[s],d=l(f,e);if(void 0===d){var p=r(s,e);throw new Error(p)}i[s]=d,o=o||d!==f}return o?i:t}}e.a=i;var a=n(29);n(30),n(32)},function(t,e,n){"use strict";function r(t,e){return function(){return e(t.apply(void 0,arguments))}}function o(t,e){if("function"==typeof t)return r(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(t),o={},i=0;i<n.length;i++){var a=n[i],u=t[a];"function"==typeof u&&(o[a]=r(u,e))}return o}e.a=o},function(t,e,n){"use strict";function r(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(n,r,a){var u=t(n,r,a),c=u.dispatch,s=[],l={getState:u.getState,dispatch:function(t){return c(t)}};return s=e.map(function(t){return t(l)}),c=o.a.apply(void 0,s)(u.dispatch),i({},u,{dispatch:c})}}}e.a=r;var o=n(33),i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}},function(t,e,n){(function(t){!function(t,n){n(e)}(0,function(e){"use strict";function n(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}function r(t,e){Object.defineProperty(this,"kind",{value:t,enumerable:!0}),e&&e.length&&Object.defineProperty(this,"path",{value:e,enumerable:!0})}function o(t,e,n){o.super_.call(this,"E",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(t,e){i.super_.call(this,"N",t),Object.defineProperty(this,"rhs",{value:e,enumerable:!0})}function a(t,e){a.super_.call(this,"D",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0})}function u(t,e,n){u.super_.call(this,"A",t),Object.defineProperty(this,"index",{value:e,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function c(t,e,n){var r=t.slice((n||e)+1||t.length);return t.length=e<0?t.length+e:e,t.push.apply(t,r),t}function s(t){var e=void 0===t?"undefined":S(t);return"object"!==e?e:t===Math?"math":null===t?"null":Array.isArray(t)?"array":"[object Date]"===Object.prototype.toString.call(t)?"date":"function"==typeof t.toString&&/^\/.*\//.test(t.toString())?"regexp":"object"}function l(t,e,n,r,f,d,p){f=f||[],p=p||[];var y=f.slice(0);if(void 0!==d){if(r){if("function"==typeof r&&r(y,d))return;if("object"===(void 0===r?"undefined":S(r))){if(r.prefilter&&r.prefilter(y,d))return;if(r.normalize){var h=r.normalize(y,d,t,e);h&&(t=h[0],e=h[1])}}}y.push(d)}"regexp"===s(t)&&"regexp"===s(e)&&(t=t.toString(),e=e.toString());var v=void 0===t?"undefined":S(t),g=void 0===e?"undefined":S(e),E="undefined"!==v||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),b="undefined"!==g||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!E&&b)n(new i(y,e));else if(!b&&E)n(new a(y,t));else if(s(t)!==s(e))n(new o(y,t,e));else if("date"===s(t)&&t-e!=0)n(new o(y,t,e));else if("object"===v&&null!==t&&null!==e)if(p.filter(function(e){return e.lhs===t}).length)t!==e&&n(new o(y,t,e));else{if(p.push({lhs:t,rhs:e}),Array.isArray(t)){var O;for(t.length,O=0;O<t.length;O++)O>=e.length?n(new u(y,O,new a(void 0,t[O]))):l(t[O],e[O],n,r,y,O,p);for(;O<e.length;)n(new u(y,O,new i(void 0,e[O++])))}else{var w=Object.keys(t),x=Object.keys(e);w.forEach(function(o,i){var a=x.indexOf(o);a>=0?(l(t[o],e[o],n,r,y,o,p),x=c(x,a)):l(t[o],void 0,n,r,y,o,p)}),x.forEach(function(t){l(void 0,e[t],n,r,y,t,p)})}p.length=p.length-1}else t!==e&&("number"===v&&isNaN(t)&&isNaN(e)||n(new o(y,t,e)))}function f(t,e,n,r){return r=r||[],l(t,e,function(t){t&&r.push(t)},n),r.length?r:void 0}function d(t,e,n){if(n.path&&n.path.length){var r,o=t[e],i=n.path.length-1;for(r=0;r<i;r++)o=o[n.path[r]];switch(n.kind){case"A":d(o[n.path[r]],n.index,n.item);break;case"D":delete o[n.path[r]];break;case"E":case"N":o[n.path[r]]=n.rhs}}else switch(n.kind){case"A":d(t[e],n.index,n.item);break;case"D":t=c(t,e);break;case"E":case"N":t[e]=n.rhs}return t}function p(t,e,n){if(t&&e&&n&&n.kind){for(var r=t,o=-1,i=n.path?n.path.length-1:0;++o<i;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":d(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function y(t,e,n){if(n.path&&n.path.length){var r,o=t[e],i=n.path.length-1;for(r=0;r<i;r++)o=o[n.path[r]];switch(n.kind){case"A":y(o[n.path[r]],n.index,n.item);break;case"D":case"E":o[n.path[r]]=n.lhs;break;case"N":delete o[n.path[r]]}}else switch(n.kind){case"A":y(t[e],n.index,n.item);break;case"D":case"E":t[e]=n.lhs;break;case"N":t=c(t,e)}return t}function h(t,e,n){if(t&&e&&n&&n.kind){var r,o,i=t;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":y(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}}function v(t,e,n){if(t&&e){l(t,e,function(r){n&&!n(t,e,r)||p(t,e,r)})}}function g(t){return"color: "+L[t].color+"; font-weight: bold"}function E(t){var e=t.kind,n=t.path,r=t.lhs,o=t.rhs,i=t.index,a=t.item;switch(e){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+i+"]",a];default:return[]}}function b(t,e,n,r){var o=f(t,e);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(t){n.log("diff")}o?o.forEach(function(t){var e=t.kind,r=E(t);n.log.apply(n,["%c "+L[e].text,g(e)].concat(P(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(t){n.log("—— diff end —— ")}}function O(t,e,n,r){switch(void 0===t?"undefined":S(t)){case"object":return"function"==typeof t[r]?t[r].apply(t,P(n)):t[r];case"function":return t(e);default:return t}}function w(t){var e=t.timestamp,n=t.duration;return function(t,r,o){var i=["action"];return i.push("%c"+String(t.type)),e&&i.push("%c@ "+r),n&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}function x(t,e){var n=e.logger,r=e.actionTransformer,o=e.titleFormatter,i=void 0===o?w(e):o,a=e.collapsed,u=e.colors,c=e.level,s=e.diff,l=void 0===e.titleFormatter;t.forEach(function(o,f){var d=o.started,p=o.startedTime,y=o.action,h=o.prevState,v=o.error,g=o.took,E=o.nextState,w=t[f+1];w&&(E=w.prevState,g=w.started-d);var x=r(y),N="function"==typeof a?a(function(){return E},y,o):a,m=T(p),C=u.title?"color: "+u.title(x)+";":"",I=["color: gray; font-weight: lighter;"];I.push(C),e.timestamp&&I.push("color: gray; font-weight: lighter;"),e.duration&&I.push("color: gray; font-weight: lighter;");var A=i(x,m,g);try{N?u.title&&l?n.groupCollapsed.apply(n,["%c "+A].concat(I)):n.groupCollapsed(A):u.title&&l?n.group.apply(n,["%c "+A].concat(I)):n.group(A)}catch(t){n.log(A)}var D=O(c,x,[h],"prevState"),S=O(c,x,[x],"action"),P=O(c,x,[v,h],"error"),_=O(c,x,[E],"nextState");if(D)if(u.prevState){var L="color: "+u.prevState(h)+"; font-weight: bold";n[D]("%c prev state",L,h)}else n[D]("prev state",h);if(S)if(u.action){var j="color: "+u.action(x)+"; font-weight: bold";n[S]("%c action    ",j,x)}else n[S]("action    ",x);if(v&&P)if(u.error){var H="color: "+u.error(v,h)+"; font-weight: bold;";n[P]("%c error     ",H,v)}else n[P]("error     ",v);if(_)if(u.nextState){var k="color: "+u.nextState(E)+"; font-weight: bold";n[_]("%c next state",k,E)}else n[_]("next state",E);s&&b(h,E,n,N);try{n.groupEnd()}catch(t){n.log("—— log end ——")}})}function N(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},j,t),n=e.logger,r=e.stateTransformer,o=e.errorTransformer,i=e.predicate,a=e.logErrors,u=e.diffPredicate;if(void 0===n)return function(){return function(t){return function(e){return t(e)}}};if(t.getState&&t.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(t){return function(e){return t(e)}}};var c=[];return function(t){var n=t.getState;return function(t){return function(s){if("function"==typeof i&&!i(n,s))return t(s);var l={};c.push(l),l.started=D.now(),l.startedTime=new Date,l.prevState=r(n()),l.action=s;var f=void 0;if(a)try{f=t(s)}catch(t){l.error=o(t)}else f=t(s);l.took=D.now()-l.started,l.nextState=r(n());var d=e.diff&&"function"==typeof u?u(n,s):e.diff;if(x(c,Object.assign({},e,{diff:d})),c.length=0,l.error)throw l.error;return f}}}}var m,C,I=function(t,e){return new Array(e+1).join(t)},A=function(t,e){return I("0",e-t.toString().length)+t},T=function(t){return A(t.getHours(),2)+":"+A(t.getMinutes(),2)+":"+A(t.getSeconds(),2)+"."+A(t.getMilliseconds(),3)},D="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},_=[];m="object"===(void 0===t?"undefined":S(t))&&t?t:"undefined"!=typeof window?window:{},C=m.DeepDiff,C&&_.push(function(){void 0!==C&&m.DeepDiff===f&&(m.DeepDiff=C,C=void 0)}),n(o,r),n(i,r),n(a,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:v,enumerable:!0},applyChange:{value:p,enumerable:!0},revertChange:{value:h,enumerable:!0},isConflict:{value:function(){return void 0!==C},enumerable:!0},noConflict:{value:function(){return _&&(_.forEach(function(t){t()}),_=null),f},enumerable:!0}});var L={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},j={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(t){return t},actionTransformer:function(t){return t},errorTransformer:function(t){return t},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},H=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.dispatch,n=t.getState;return"function"==typeof e||"function"==typeof n?N()({dispatch:e,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=j,e.createLogger=N,e.logger=H,e.default=H,Object.defineProperty(e,"__esModule",{value:!0})})}).call(e,n(18))},function(t,e,n){"use strict";var r=n(28),o=r.combineReducers,i=n(64),a=n(65),u=n(66),c=n(67),s=n(69);t.exports=o({history:i,points:a,selection:u,connections:c,handles:s})},function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i={history:[],future:[]};t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i,e=arguments[1];switch(e.type){case"CLEAR_HISTORY":return i;case"ADD_ACTION_TO_HISTORY":return o({},t,{history:[].concat(r(t.history.slice(50===t.history.length?1:0)),[e.payload]),future:[]});case"UNDO":return 0===t.history.length?t:o({},t,{future:[].concat(r(t.future),[t.history[t.history.length-1]]),history:t.history.splice(0,t.history.length-1)});case"REDO":return 0===t.future.length?t:o({},t,{history:[].concat(r(t.history),[t.future[t.future.length-1]]),future:t.future.splice(0,t.future.length-1)});default:return t}}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n(0),a=i.types,u={a:{x:40,y:40},b:{x:400,y:200}};t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u,e=arguments[1];switch(e.type){case"MOVE":var n=e.payload,i=n.selection,c=n.positionChange,s=i[a.POINT];if(!Array.isArray(s))return t;for(var l=o({},t),f=0;f<s.length;f+=1){var d=s[f],p=t[d],y=p.x,h=p.y;l[d]=o({},t[d],{x:y+c.x,y:h+c.y})}return l;case"ADD_POINT":var v=e.payload,g=v.x,E=v.y,b=v.id;return o({},t,r({},b,{x:g,y:E}));case"DELETE_POINT":return Object.keys(t).reduce(function(n,r){return r!==e.payload&&(n[r]=t[r]),n},{});default:return t}}},function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},a={};t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,e=arguments[1];switch(e.type){case"ADD_SELECTION_TYPE":return i({},t,o({},e.payload,[]));case"ADD_TO_SELECTION":var n=e.payload,u=n.id,c=n.type;return i({},t,o({},c,[].concat(r(t[c]),[u])));case"REMOVE_FROM_SELECTION":var s=e.payload,l=s.type,f=s.itemIndex;return i({},t,o({},l,t[l].filter(function(t,e){return e!==f})));case"CLEAR_SELECTION":for(var d={},p=Object.keys(t),y=0;y<p.length;y+=1)d[p[y]]=[];return d;case"RESTORE_SELECTION":for(var h=i({},e.payload),v=Object.keys(t),g=0;g<v.length;g+=1)Array.isArray(h[v[g]])||(h[v[g]]=[]);return h;default:return t}}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n(19),a=i.toConnectionId,u=n(68),c=u.checkValidConnection,s=u.checkIdArray,l=r({},a("a","b"),{id:a("a","b"),points:["a","b"],handles:["x","y"]});t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:l,e=arguments[1];switch(e.type){case"ADD_CONNECTION":c(e.payload);var n=e.payload.id;if(t[n])throw new Error("There is already a connection by the id '"+n+"'");return o({},t,r({},n,e.payload));case"REPLACE_CONNECTION_POINT_IDS":var i=e.payload,a=i.id,u=i.handles,f=i.points;if(!t[a])throw new Error("Connection by id '"+a+"' does not exist.");return u&&s(u),f&&s(f),o({},t,r({},a,o({},t[a],{handles:u||t[a].handles,points:f||t[a].points})));case"DELETE_CONNECTION":var d=e.payload;return Object.keys(t).reduce(function(e,n){return n!==d&&(e[n]=t[n]),e},{});default:return t}}},function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function o(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;t.length!==e&&u();for(var n=0;n<t.length;n+=1)t[n]&&"object"===i(t[n])&&u(),"string"!=typeof t[n]&&"object"!==i(t[n])&&u()}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=function(){throw new Error("Invalid connection.")},u=function(){throw new Error("Invalid id array.")};e.checkIdArray=o,e.checkValidConnection=function(t){var e=t.id,n=t.points,i=t.handles;e&&"string"==typeof e||a(),Array.isArray(n)&&Array.isArray(i)||a(),n[0]||a(),n[1]||i[0]||a(),o([].concat(r(n),r(i)),4)}},function(t,e,n){"use strict";var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(0),i=o.types,a={x:{x:240,y:20,id:"x"},y:{x:360,y:500,id:"y"}};t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,e=arguments[1];switch(e.type){case"MOVE":var n=e.payload,o=n.selection,u=n.positionChange,c=o[i.HANDLE];if(!Array.isArray(c))return t;for(var s=r({},t),l=0;l<c.length;l+=1){var f=c[l],d=t[f],p=d.x,y=d.y;s[f]=r({},t[f],{x:p+u.x,y:y+u.y})}return s;case"ADD_HANDLES":for(var h=r({},t),v=e.payload,g=0;g<v.length;g+=1){var E=v[g],b=E.id,O=E.x,w=E.y;h[b]={x:O,y:w,id:b}}return h;case"DELETE_HANDLES":var x=e.payload;return Object.keys(t).reduce(function(e,n){return x.indexOf(n)<0&&(e[n]=t[n]),e},{});default:return t}}},function(t,e,n){"use strict";var r=n(34),o=n(22),i=n(21),a=n(71);t.exports=function(t,e){if(-1!==t.points.indexOf(null))return null;for(var n=void 0,u=void 0,c=0;c<40;c+=1){var s=c/39,l=r(t,i(0,1,s)),f=o(e,l),d={x:l.x,y:l.y,distance:f,t:s};!n||f<n.distance?(u=n,n=d):(!u||f<u.distance)&&(u=d)}if(n.distance>225)return null;for(var p=a(t,20,n.t,u.t),y=void 0,h=0;h<p.length;h+=1){var v=o(e,p[h]);(!y||v<y.distance)&&(y={x:p[h].x,y:p[h].y,t:p[h].t,distance:v})}return y}},function(t,e,n){"use strict";var r=n(21),o=n(34);t.exports=function(t,e,n,i){for(var a=[],u=0;u<e;u+=1){var c=r(n,i,u/e),s=o(t,c);a.push(s)}return a}},function(t,e,n){"use strict";var r=n(4),o=r.getAllHandles,i=n(22),a=n(2);a.getPointById;t.exports=function(t,e){for(var n=o(),r=void 0,a=void 0,u=0;u<n.length;u+=1){var c=i(t,n[u]);(!a||c<a)&&(r=n[u],a=c)}return a<225?r:null}},function(t,e,n){"use strict";var r=n(13),o=r.getGuidesOfType,i=n(12),a=n(20),u=n(10),c=u.getAllConnections,s=n(75),l=n(23),f=l.renderLine,d=l.renderCubicBezier,p=l.renderQuadraticBezier,y=n(0),h=y.types,v=y.colors;t.exports=function(){for(var t=c(),e=0;e<t.length;e+=1){var n=a(t[e]);-1===n.indexOf(null)?d(n):n[0]&&n[3]&&(n[1]||n[2]?p(n.filter(function(t){return t})):f(n[0],n[3])),s(t[e])}o(h.CONN).forEach(function(t){d(t,1,v.PRIMARY)}),o(h.LINE).forEach(function(t){i();f(t.from,t.to,v.PRIMARY,1)})}},function(t,e,n){"use strict";for(var r=n(0),o=r.types,i=[],a=Object.keys(o),u=0;u<a.length;u+=1)i.push(o[a[u]]);e.isValidType=function(){return i.indexOf(type)>-1},e.checkType=function(t){if(-1===i.indexOf(t))throw new Error("Invalid type '"+t+"'.")}},function(t,e,n){"use strict";function r(t,e,n){var r=u("__HANDLE").indexOf(e.id)>-1;d(t,e,r?v:"#aaa",1);var o=r?h:"#999";f(e,r?4:3,o)}var o=n(4),i=o.getHandleById,a=n(3),u=a.getSelectedOfType,c=n(2),s=c.getPointById,l=n(23),f=l.renderCircle,d=l.renderLine,p=(n(12),n(0)),y=p.colors,h=y.PRIMARY,v=y.PRIMARY_LIGHT;t.exports=function(t){for(var e=0;e<t.handles.length;e+=1)if(t.handles[e]&&t.points[e]){var n=i(t.handles[e]),o=s(t.points[e]);r(o,n)}}},function(t,e,n){"use strict";var r=n(13),o=r.getGuidesOfType,i=n(3),a=i.getSelectedOfType,u=n(2),c=u.getAllPoints,s=n(23),l=s.renderCircle,f=n(0),d=f.colors,p=f.types;t.exports=function(){for(var t=c(),e=a(p.POINT),n=0;n<t.length;n+=1){e.indexOf(t[n].id)>-1?l(t[n],5,d.WHITE,{color:d.PRIMARY,width:2}):l(t[n],4,d.PRIMARY)}for(var r=o(p.POINT),i=0;i<r.length;i+=1)l(r[i],4,d.PRIMARY)}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o,i=n(0),a=i.types,u=a.POINT,c=a.CONN,s=a.HANDLE,l=(o={},r(o,u,function(t){return t.id}),r(o,s,function(t){return t.id}),r(o,c,function(t){return t.connection.id}),o);t.exports=function(t,e){if("function"!=typeof l[t])throw new Error("Invalid type: '"+t+"'.");return l[t](e)}},function(t,e,n){"use strict";var r=n(25),o=n(1),i=n(11);t.exports=function(){var t=o.getState().history.history;if(t.length){var e=t[t.length-1];o.dispatch({type:"UNDO"}),r(e,{undo:!0}),i(null,{useLastPosition:!0})}}},function(t,e,n){"use strict";var r=n(80),o=n(81),i=n(82),a=n(83),u=n(84),c=n(85),s=n(86),l=n(87),f=n(88),d=n(89),p=n(90),y=function(t){return{redo:t.undo,undo:t.redo}};t.exports=Object.freeze({MOVE:r,ADD_POINT:o,DELETE_POINT:y(o),ADD_PEN_POINT:i,ADD_CONNECTION:a,DELETE_CONNECTION:y(a),SPLIT_CONNECTION:u,SPLIT_LINE_CONNECTION:c,CONNECT_POINTS:s,ADD_STRAY_CONNECTION:l,COMPLETE_STRAY_CONNECTION:f,REPLACE_CONNECTION_POINT_IDS:d,ADD_HANDLES:p,DELETE_HANDLES:y(p)})},function(t,e,n){"use strict";var r=function(t,e){return{type:"MOVE",payload:{selection:t,positionChange:e}}};t.exports={redo:function(t){var e=t.selection,n=t.positionChange;return r(e,n)},undo:function(t){var e=t.selection,n=t.positionChange;return r(e,{x:-1*n.x,y:-1*n.y})}}},function(t,e,n){"use strict";var r=n(6);t.exports={redo:function(t){if(!r(t))throw new Error("Invalid position.");if(!t.id||"string"!=typeof t.id)throw new Error("Invalid point id. Expected string but got '"+t.id+"'.");return{type:"ADD_POINT",payload:t}},undo:function(t){var e=t.id;if(!e||"string"!=typeof e)throw new Error("Invalid point id. Expected string but got '"+e+"'.");return{type:"DELETE_POINT",payload:e}}}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o=n(0),i=o.types;t.exports=function(t){var e=t.point,n=t.newHandle,o=t.newConnection,a=t.movedHandle,u=t.strayConnection,c=t.completedConnection,s=t.newCompletedConnectionHandle,l=t.lineConnection,f=t.lineConnectionHandles,d=[{type:"ADD_POINT",data:e}];if(n&&(d.push({type:"ADD_CONNECTION",data:o}),d.push({type:"ADD_HANDLES",data:[n]})),l&&(d.push({type:"ADD_CONNECTION",data:l}),f&&d.push({type:"ADD_HANDLES",data:[f]})),c){if(d.push({type:"REPLACE_CONNECTION_POINT_IDS",data:{oldConnection:u,newConnection:c}}),a){var p=a.id,y=a.positionChange;d.push({type:"MOVE",data:{selection:r({},i.HANDLE,[p]),positionChange:y}})}s||d.push({type:"ADD_HANDLES",data:[s]})}return d}},function(t,e,n){"use strict";var r=n(19);r.toConnectionId;e.redo=function(t){var e=t.points,n=t.handles;return{type:"ADD_CONNECTION",payload:{id:t.id,points:e,handles:n}}},e.undo=function(t){return{type:"DELETE_CONNECTION",payload:t.id}}},function(t,e,n){"use strict";var r=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.exports=function(t){var e=t.connection,n=t.newPoints,o=t.ids,i=[],a=r(e.points,2),u=a[0],c=a[1],s=r(n,7),l=(s[0],s[1]),f=s[2],d=s[3],p=s[4],y=s[5];s[6];return i.push({type:"DELETE_CONNECTION",data:e}),i.push({type:"ADD_POINT",data:d}),i.push({type:"ADD_CONNECTION",data:{id:o[0],points:[u,d.id],handles:[l.id,f.id]}}),i.push({type:"ADD_CONNECTION",data:{id:o[1],points:[d.id,c],handles:[p.id,y.id]}}),i.push({type:"ADD_HANDLES",data:[l,f,p,y]}),i}},function(t,e,n){"use strict";var r=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.exports=function(t){var e=t.ids,n=t.connection,o=t.newPoint,i=[],a=r(n.points,2),u=a[0],c=a[1];return i.push({type:"DELETE_CONNECTION",data:n}),i.push({type:"ADD_POINT",data:o}),i.push({type:"ADD_CONNECTION",data:{id:e[0],points:[u,o.id],handles:[null,null]}}),i.push({type:"ADD_CONNECTION",data:{id:e[1],points:[o.id,c],handles:[null,null]}}),i}},function(t,e,n){"use strict";t.exports=function(t){var e=t.connection,n=t.handles,r=t.strayConnection,o=t.strayConnectionHandle,i=[];return i.push({type:"ADD_CONNECTION",data:e}),n&&i.push({type:"ADD_HANDLES",data:n}),r&&(i.push({type:"ADD_CONNECTION",data:r}),i.push({type:"ADD_HANDLES",data:[o]})),i}},function(t,e,n){"use strict";t.exports=function(t){var e=t.pointId,n=t.connectionId,r=t.handleId,o=t.handlePosition;return[{type:"ADD_CONNECTION",data:{id:n,points:[e,null],handles:[r,null]}},{type:"ADD_HANDLES",data:[{x:o.x,y:o.y,id:r}]}]}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=n(4),u=a.getHandleById,c=n(14),s=n(0),l=s.types;t.exports=function(t){var e=t.handleId,n=t.newPoints,a=t.pointIds,s=t.connection,f=[],d=i(n,4),p=(d[0],d[1]),y=d[2],h=d[3];return f.push({type:"REPLACE_CONNECTION_POINT_IDS",data:{newConnection:{id:s.id,points:[s.points[0],a[3]],handles:[s.handles[0],a[2]]},oldConnection:s}}),f.push({type:"ADD_POINT",data:o({},h,{id:a[3]})}),f.push({type:"ADD_HANDLES",data:[o({},y,{id:a[2]})]}),f.push({type:"MOVE",data:{selection:r({},l.HANDLE,[e]),positionChange:c(u(s.handles[0]),p)}}),f}},function(t,e,n){"use strict";n(1);e.undo=function(t){return{type:"REPLACE_CONNECTION_POINT_IDS",payload:t.oldConnection}},e.redo=function(t){return{type:"REPLACE_CONNECTION_POINT_IDS",payload:t.newConnection}}},function(t,e,n){"use strict";var r=n(6);t.exports={redo:function(t){for(var e=0;e<t.length;e+=1){if(!r(t[e]))throw new Error("Invalid handle.");if(!t[e].id||"string"!=typeof t[e].id)throw new Error("Invalid handle id. Expected string but got '"+t[e].id+"'.")}return{type:"ADD_HANDLES",payload:t}},undo:function(t){for(var e=0;e<t.length;e+=1)if(!t[e].id||"string"!=typeof t[e].id)throw new Error("Invalid handle id. Expected string but got '"+t[e].id+"'.");return{type:"DELETE_HANDLES",payload:t.map(function(t){return t.id})}}}},function(t,e,n){"use strict";var r=n(25),o=n(1),i=n(11);t.exports=function(){var t=o.getState().history.future;if(t.length){var e=t[t.length-1];r(e,{undo:!1}),o.dispatch({type:"REDO"}),i(null,{useLastPosition:!0})}}},function(t,e,n){"use strict";var r=n(10),o=r.getConnectionById,i=n(2),a=i.getPointHandleIds,u=n(0),c=u.types;t.exports=function(t){function e(t,e){Array.isArray(i[t])?-1===i[t].indexOf(e)&&i[t].push(e):i[t]=[e]}function n(t,e){if(t===c.POINT){var n=a(e).filter(function(t){return t});r(c.HANDLE,n)}else if(t===c.CONN){var i=o(e).points;r(c.POINT,i)}}function r(t,r){for(var o=0;o<r.length;o+=1)e(t,r[o]),n(t,r[o])}for(var i={},u=Object.keys(t),s=0;s<u.length;s+=1){var l=u[s];Array.isArray(i[l])||(i[l]=[]);for(var f=0;f<t[l].length;f+=1)e(l,t[l][f]),n(l,t[l][f])}return i}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n(8),a=n(7),u=a.addListener,c=a.removeListener,s=n(24),l=s.isKeyDown,f=n(94),d=n(3),p=d.getSelectedOfType,y=n(5),h=y.setCursor,v=y.releaseOverride,g=n(95),E=n(20),b=n(15),O=n(35),w=n(0),x=w.types,N=(w.cursors,w.keys),m=n(1),C=(n(16),n(2)),I=(C.getPointById,n(4)),A=(I.getHandleById,n(14)),T=n(3),D=T.addToSelection,S=T.clearSelection,P=T.isSelected,_=n(96),L=n(97);t.exports=function(t,e){if(e){var n=e.value,a=e.type;if(a===x.CONN){var s=n.connection,d=n.closestPoint,y=d.t,w=E(s);if(w[1]||w[2]){for(var C=g(w,y),I=0;I<C.length;I+=1)C[I].id=i();C[2].sibling=C[4].id,C[4].sibling=C[2].id,S(),D(x.POINT,C[3].id),b({type:"SPLIT_CONNECTION",data:{ids:[i(),i()],connection:s,newPoints:C}},!0),h("DEFAULT")}else{var T=i();S(),D(x.POINT,T),b({type:"SPLIT_LINE_CONNECTION",data:{ids:[i(),i()],connection:s,newPoint:o({},d,{id:T})}},!0)}}if(a===x.HANDLE&&O(t,e),a===x.POINT){var j=p(x.POINT);if(1===j.length&&j[0]!==n.id)return void _(j[0],n.id);l(N.SHIFT)||S(),P(x.POINT,n.id)||D(x.POINT,n.id);var H=!1,k=void 0,R=t,M=1===j.length?f(j[0]):null;if(!M){var V=i(),B=i(),F=u("mousemove",function(t){H?m.dispatch({type:"MOVE",payload:{selection:r({},x.HANDLE,[B]),positionChange:A(R,t)}}):(H=!0,k=h("PEN",{override:!0}),m.dispatch({type:"ADD_CONNECTION",payload:{id:V,points:[n.id,null],handles:[B,null]}}),m.dispatch({type:"ADD_HANDLES",payload:[{x:t.x,y:t.y,id:B}]})),R=t});u("mouseup",function(){c("mousemove",F),"string"==typeof k&&(v(k),h("DEFAULT")),H&&!M&&b({type:"ADD_STRAY_CONNECTION",data:{pointId:j[0],connectionId:V,handleId:B,handlePosition:R}},!1)},!0)}}}else{var U=p(x.POINT);if(1===U.length){var Y=f(U[0]);Y?L(t,{strayConnection:Y}):L(t,{selectedPoint:U[0]})}else L(t)}}},function(t,e,n){"use strict";var r=n(2),o=r.getPointConnections;t.exports=function(t){for(var e=o(t),n=0;n<e.length;n+=1)if(null===e[n].points[1])return e[n];return null}},function(t,e,n){"use strict";var r=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.exports=function(t,e){var n=r(t,4),o=n[0],i=n[1],a=n[2],u=n[3],c=o.x,s=o.y,l=i.x,f=i.y,d=a.x,p=a.y,y=u.x,h=u.y,v=(l-c)*e+c,g=(f-s)*e+s,E=(d-l)*e+l,b=(p-f)*e+f,O=(y-d)*e+d,w=(h-p)*e+p,x=(E-v)*e+v,N=(b-g)*e+g,m=(O-E)*e+E,C=(w-b)*e+b;return[{x:c,y:s},{x:v,y:g},{x:x,y:N},{x:(m-x)*e+x,y:(C-N)*e+N},{x:m,y:C},{x:O,y:w},{x:y,y:h}]}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},a=(n(4),n(8)),u=n(7),c=u.addListener,s=u.removeListener,l=(n(6),n(3)),f=l.addToSelection,d=l.clearSelection,p=(l.isSelected,n(15)),y=n(5),h=y.setCursor,v=y.releaseOverride,g=n(14),E=n(1),b=n(36),O=n(16),w=n(2),x=w.getPointById,N=n(0),m=N.types;t.exports=function(t,e){var n={selectedPointId:t,clickedPointId:e,connection:{id:a(),points:[t,e],handles:[null,null]}};E.dispatch({type:"ADD_CONNECTION",payload:n.connection}),d(),f(m.POINT,e);var u=!1,l=void 0,y=i({},x(e)),w=c("mousemove",function(c){if(u||!(Math.hypot(y.x-c.x,y.y-c.y)<10)){if(u){var s=x(e),f=O(x(t),null,b(c,s),s),d=o(f,4),p=(d[0],d[1]),v=d[2];d[3];E.dispatch({type:"MOVE",payload:{selection:r({},m.HANDLE,[n.handles[1].id]),positionChange:g(n.handles[1],p)}}),n.handles[1].x=p.x,n.handles[1].y=p.y,E.dispatch({type:"MOVE",payload:{selection:r({},m.HANDLE,[n.handles[0].id]),positionChange:g(n.handles[0],v)}}),n.handles[0].x=v.x,n.handles[0].y=v.y,E.dispatch({type:"MOVE",payload:{selection:r({},m.HANDLE,[n.strayConnection.handles[0]]),positionChange:g(n.strayConnectionHandle,c)}}),n.strayConnectionHandle.x=c.x,n.strayConnectionHandle.y=c.y}else{u=!0,l=h("PEN",{override:!0});var w=a();n.strayConnection={id:a(),points:[e,null],handles:[w,null]},n.strayConnectionHandle={id:w,x:c.x,y:c.y},E.dispatch({type:"ADD_CONNECTION",payload:n.strayConnection}),E.dispatch({type:"ADD_HANDLES",payload:[n.strayConnectionHandle]});var N=x(e),C=O(x(t),null,b(c,N),N),I=o(C,4),A=(I[0],I[1]),T=I[2];I[3];n.handles=[A,T].map(function(t){return i({},t,{id:a()})}),n.connection.handles=n.handles.map(function(t){return t.id}),E.dispatch({type:"ADD_HANDLES",payload:n.handles}),E.dispatch({type:"REPLACE_CONNECTION_POINT_IDS",payload:n.connection})}y=c}});c("mouseup",function(){s("mousemove",w),l&&(v(l),h("DEFAULT")),p({type:"CONNECT_POINTS",data:n},!1)},!0)}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var o=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=n(4),a=n(8),u=n(7),c=u.addListener,s=u.removeListener,l=n(6),f=n(3),d=f.addToSelection,p=f.clearSelection,y=(f.isSelected,n(15)),h=n(5),v=h.setCursor,g=h.releaseOverride,E=n(14),b=n(1),O=n(36),w=n(16),x=n(2),N=x.getPointById,m=n(0),C=m.types,I={strayConnection:null,selectedPoint:null};t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:I;if(!l(t))throw new Error("Invalid position.");var n={},u=a();n.point={id:u,x:t.x,y:t.y},b.dispatch({type:"ADD_POINT",payload:n.point}),p(),d(C.POINT,u);var f=!1,h=void 0,x=t,m=a(),A=a(),T=void 0,D=void 0;if(e.strayConnection){var S=e.strayConnection;n.strayConnection=S;var P=w(N(S.points[0]),(0,i.getHandleById)(S.handles[0]),null,t);D=P,n.newCompletedConnectionHandle={id:a(),x:P[2].x,y:P[2].y},n.completedConnection={id:S.id,points:[S.points[0],n.point.id],handles:[S.handles[0],n.newCompletedConnectionHandle.id]},b.dispatch({type:"ADD_HANDLES",payload:[n.newCompletedConnectionHandle]}),b.dispatch({type:"REPLACE_CONNECTION_POINT_IDS",payload:n.completedConnection}),T=(0,i.getHandleById)(S.handles[0]);var _=E(T,P[1]);n.movedHandle={id:S.handles[0],positionChange:_},b.dispatch({type:"MOVE",payload:{selection:r({},C.HANDLE,[n.movedHandle.id]),positionChange:_}})}else e.selectedPoint&&(n.lineConnection={id:a(),points:[e.selectedPoint,u],handles:[null,null]},b.dispatch({type:"ADD_CONNECTION",payload:n.lineConnection}));var L=c("mousemove",function(i){if(f||!(Math.hypot(x.x-i.x,x.y-i.y)<10)){if(f){var c=E(x,i);if(b.dispatch({type:"MOVE",payload:{selection:r({},C.HANDLE,[m]),positionChange:c}}),n.newHandle.x=i.x,n.newHandle.y=i.y,e.strayConnection){var s=n.newCompletedConnectionHandle,l=n.newCompletedConnectionHandle.id,d=O(i,t);b.dispatch({type:"MOVE",payload:{selection:r({},C.HANDLE,[l]),positionChange:E(s,d)}}),n.newCompletedConnectionHandle.x=d.x,n.newCompletedConnectionHandle.y=d.y}else if(n.lineConnection){var p=w(N(e.selectedPoint),null,O(i,t),t),y=o(p,4),g=(y[0],y[1]),I=y[2];y[3];b.dispatch({type:"MOVE",payload:{selection:r({},C.HANDLE,[n.lineConnectionRightHandle.id]),positionChange:E(n.lineConnectionRightHandle,g)}}),n.lineConnectionRightHandle.x=g.x,n.lineConnectionRightHandle.y=g.y,b.dispatch({type:"MOVE",payload:{selection:r({},C.HANDLE,[n.lineConnectionLeftHandle.id]),positionChange:E(n.lineConnectionLeftHandle,I)}}),n.lineConnectionLeftHandle.x=I.x,n.lineConnectionLeftHandle.y=I.y}}else if(f=!0,h=v("PEN",{override:!0}),n.newConnection={id:A,points:[u,null],handles:[m,null]},n.newHandle={x:i.x,y:i.y,id:m},b.dispatch({type:"ADD_CONNECTION",payload:n.newConnection}),b.dispatch({type:"ADD_HANDLES",payload:[n.newHandle]}),e.strayConnection){n.movedHandle.positionChange=E(D[1],T),b.dispatch({type:"MOVE",payload:{selection:r({},C.HANDLE,[n.movedHandle.id]),positionChange:n.movedHandle.positionChange}});var S=E(n.newCompletedConnectionHandle,i);b.dispatch({type:"MOVE",payload:{selection:r({},C.HANDLE,[n.newCompletedConnectionHandle.id]),positionChange:S}}),n.newCompletedConnectionHandle.x=i.x,n.newCompletedConnectionHandle.y=i.y}else if(n.lineConnection){n.lineConnectionRightHandle={id:a(),x:i.x,y:i.y};var P=w(N(e.selectedPoint),null,n.lineConnectionRightHandle,t)[1];n.lineConnectionLeftHandle={id:a(),x:P.x,y:P.y},n.lineConnection.handles=[n.lineConnectionLeftHandle.id,n.lineConnectionRightHandle.id],b.dispatch({type:"ADD_HANDLES",payload:[n.lineConnectionLeftHandle,n.lineConnectionRightHandle]}),b.dispatch({type:"REPLACE_CONNECTION_POINT_IDS",payload:n.lineConnection})}x=i}});c("mouseup",function(){s("mousemove",L),h&&(g(h),v("DEFAULT")),y({type:"ADD_PEN_POINT",data:n},!1)},!0)}},function(t,e,n){"use strict";var r=n(4),o=n(2),i=n(2),a=i.getPointConnections,u=n(13),c=u.addGuide,s=n(3),l=s.getSelectedOfType,f=n(5),d=f.setCursor,p=n(0),y=p.types,h=n(16);t.exports=function(t,e){if(e){var n=e.value,i=e.type;if(i===y.CONN){n.closestPoint;d("PEN_ADD_POINT"),c(y.POINT,n.closestPoint)}else if(i===y.POINT){var u=l(y.POINT);1===u.length?u[0]!==n.id?(d("PEN_SELECT_POINT"),c(y.LINE,{from:(0,o.getPointById)(u[0]),to:n})):d("PEN_SELECT_POINT"):d("PEN_ADD_POINT")}else i===y.HANDLE&&d("DEFAULT")}else{c(y.POINT,t);var s=l(y.POINT);if(1===s.length){for(var f=!1,p=a(s[0]),v=0;v<p.length;v+=1)null===p[v].points[1]&&(f=p[v],v=p.length);if(f){var g=h((0,o.getPointById)(s[0]),(0,r.getHandleById)(f.handles[0]),null,t);c(y.CONN,g)}else c(y.LINE,{from:(0,o.getPointById)(s[0]),to:t});d("PEN_ADD_POINT")}}}},function(t,e,n){"use strict";var r=n(17),o=r.setTool,i=[{icon:"default-cursor.png",toolKey:"v",id:"movetool",position:{x:7,y:7}},{icon:"pen-cursor.png",toolKey:"p",id:"pentool",position:{x:7,y:7}}];t.exports=function(){i.map(function(t){var e=t.icon,n=t.toolKey,r=t.id,i=t.position,a=document.createElement("BUTTON");return a.classList.add("tool"),a.id=r,a.style.backgroundImage='url("static/images/'+e+'")',a.style.backgroundPositionX=i.x+"px",a.style.backgroundPositionY=i.y+"px",a.setAttribute("data-tool-key",n),"movetool"===r&&a.classList.add("active"),a.onclick=function(){return o(n)},a}).forEach(function(t){document.getElementById("toolbar").appendChild(t)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,